// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fsUserFieldNames          = builder.RawFieldNames(&FsUser{})
	fsUserRows                = strings.Join(fsUserFieldNames, ",")
	fsUserRowsExpectAutoSet   = strings.Join(stringx.Remove(fsUserFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	fsUserRowsWithPlaceHolder = strings.Join(stringx.Remove(fsUserFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheFsUserIdPrefix       = "cache:fsUser:id:"
	cacheFsUserMobilePrefix   = "cache:fsUser:mobile:"
	cacheFsUserUsernamePrefix = "cache:fsUser:username:"
)

type (
	fsUserModel interface {
		Insert(ctx context.Context, data *FsUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FsUser, error)
		FindOneByMobile(ctx context.Context, mobile string) (*FsUser, error)
		FindOneByUsername(ctx context.Context, username string) (*FsUser, error)
		Update(ctx context.Context, data *FsUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFsUserModel struct {
		sqlc.CachedConn
		table string
	}

	FsUser struct {
		Id         int64     `db:"id"`
		Username   string    `db:"username"` // 用户名
		Mobile     string    `db:"mobile"`   // 用户电话
		Password   string    `db:"password"` // 密码
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newFsUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFsUserModel {
	return &defaultFsUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`fs_user`",
	}
}

func (m *defaultFsUserModel) Insert(ctx context.Context, data *FsUser) (sql.Result, error) {
	fsUserIdKey := fmt.Sprintf("%s%v", cacheFsUserIdPrefix, data.Id)
	fsUserMobileKey := fmt.Sprintf("%s%v", cacheFsUserMobilePrefix, data.Mobile)
	fsUserUsernameKey := fmt.Sprintf("%s%v", cacheFsUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, fsUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Mobile, data.Password)
	}, fsUserMobileKey, fsUserUsernameKey, fsUserIdKey)
	return ret, err
}

func (m *defaultFsUserModel) FindOne(ctx context.Context, id int64) (*FsUser, error) {
	fsUserIdKey := fmt.Sprintf("%s%v", cacheFsUserIdPrefix, id)
	var resp FsUser
	err := m.QueryRowCtx(ctx, &resp, fsUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fsUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFsUserModel) FindOneByMobile(ctx context.Context, mobile string) (*FsUser, error) {
	fsUserMobileKey := fmt.Sprintf("%s%v", cacheFsUserMobilePrefix, mobile)
	var resp FsUser
	err := m.QueryRowIndexCtx(ctx, &resp, fsUserMobileKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `mobile` = ? limit 1", fsUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mobile); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFsUserModel) FindOneByUsername(ctx context.Context, username string) (*FsUser, error) {
	fsUserUsernameKey := fmt.Sprintf("%s%v", cacheFsUserUsernamePrefix, username)
	var resp FsUser
	err := m.QueryRowIndexCtx(ctx, &resp, fsUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", fsUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFsUserModel) Update(ctx context.Context, data *FsUser) error {
	fsUserMobileKey := fmt.Sprintf("%s%v", cacheFsUserMobilePrefix, data.Mobile)
	fsUserUsernameKey := fmt.Sprintf("%s%v", cacheFsUserUsernamePrefix, data.Username)
	fsUserIdKey := fmt.Sprintf("%s%v", cacheFsUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fsUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.Mobile, data.Password, data.Id)
	}, fsUserMobileKey, fsUserUsernameKey, fsUserIdKey)
	return err
}

func (m *defaultFsUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	fsUserUsernameKey := fmt.Sprintf("%s%v", cacheFsUserUsernamePrefix, data.Username)
	fsUserIdKey := fmt.Sprintf("%s%v", cacheFsUserIdPrefix, id)
	fsUserMobileKey := fmt.Sprintf("%s%v", cacheFsUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fsUserMobileKey, fsUserUsernameKey, fsUserIdKey)
	return err
}

func (m *defaultFsUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFsUserIdPrefix, primary)
}

func (m *defaultFsUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fsUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFsUserModel) tableName() string {
	return m.table
}
