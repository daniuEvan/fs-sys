// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fsUserFileFieldNames          = builder.RawFieldNames(&FsUserFile{})
	fsUserFileRows                = strings.Join(fsUserFileFieldNames, ",")
	fsUserFileRowsExpectAutoSet   = strings.Join(stringx.Remove(fsUserFileFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	fsUserFileRowsWithPlaceHolder = strings.Join(stringx.Remove(fsUserFileFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheFsUserFileIdPrefix             = "cache:fsUserFile:id:"
	cacheFsUserFileUserIdFileHashPrefix = "cache:fsUserFile:userId:fileHash:"
)

type (
	fsUserFileModel interface {
		Insert(ctx context.Context, data *FsUserFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FsUserFile, error)
		FindOneByUserIdFileHash(ctx context.Context, userId int64, fileHash string) (*FsUserFile, error)
		Update(ctx context.Context, data *FsUserFile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFsUserFileModel struct {
		sqlc.CachedConn
		table string
	}

	FsUserFile struct {
		Id         int64     `db:"id"`
		UserId     int64     `db:"user_id"`
		FileHash   string    `db:"file_hash"` // 文件hash
		FileSize   int64     `db:"file_size"` // 文件大小
		FileName   string    `db:"file_name"` // 文件名
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Status     int64     `db:"status"` // 文件状态(0正常1已删除2禁用)
	}
)

func newFsUserFileModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFsUserFileModel {
	return &defaultFsUserFileModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`fs_user_file`",
	}
}

func (m *defaultFsUserFileModel) Insert(ctx context.Context, data *FsUserFile) (sql.Result, error) {
	fsUserFileIdKey := fmt.Sprintf("%s%v", cacheFsUserFileIdPrefix, data.Id)
	fsUserFileUserIdFileHashKey := fmt.Sprintf("%s%v:%v", cacheFsUserFileUserIdFileHashPrefix, data.UserId, data.FileHash)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, fsUserFileRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FileHash, data.FileSize, data.FileName, data.Status)
	}, fsUserFileIdKey, fsUserFileUserIdFileHashKey)
	return ret, err
}

func (m *defaultFsUserFileModel) FindOne(ctx context.Context, id int64) (*FsUserFile, error) {
	fsUserFileIdKey := fmt.Sprintf("%s%v", cacheFsUserFileIdPrefix, id)
	var resp FsUserFile
	err := m.QueryRowCtx(ctx, &resp, fsUserFileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fsUserFileRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFsUserFileModel) FindOneByUserIdFileHash(ctx context.Context, userId int64, fileHash string) (*FsUserFile, error) {
	fsUserFileUserIdFileHashKey := fmt.Sprintf("%s%v:%v", cacheFsUserFileUserIdFileHashPrefix, userId, fileHash)
	var resp FsUserFile
	err := m.QueryRowIndexCtx(ctx, &resp, fsUserFileUserIdFileHashKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `file_hash` = ? limit 1", fsUserFileRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, fileHash); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFsUserFileModel) Update(ctx context.Context, data *FsUserFile) error {
	fsUserFileIdKey := fmt.Sprintf("%s%v", cacheFsUserFileIdPrefix, data.Id)
	fsUserFileUserIdFileHashKey := fmt.Sprintf("%s%v:%v", cacheFsUserFileUserIdFileHashPrefix, data.UserId, data.FileHash)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fsUserFileRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.FileHash, data.FileSize, data.FileName, data.Status, data.Id)
	}, fsUserFileUserIdFileHashKey, fsUserFileIdKey)
	return err
}

func (m *defaultFsUserFileModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	fsUserFileIdKey := fmt.Sprintf("%s%v", cacheFsUserFileIdPrefix, id)
	fsUserFileUserIdFileHashKey := fmt.Sprintf("%s%v:%v", cacheFsUserFileUserIdFileHashPrefix, data.UserId, data.FileHash)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fsUserFileIdKey, fsUserFileUserIdFileHashKey)
	return err
}

func (m *defaultFsUserFileModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFsUserFileIdPrefix, primary)
}

func (m *defaultFsUserFileModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fsUserFileRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFsUserFileModel) tableName() string {
	return m.table
}
