// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fsFilesFieldNames          = builder.RawFieldNames(&FsFiles{})
	fsFilesRows                = strings.Join(fsFilesFieldNames, ",")
	fsFilesRowsExpectAutoSet   = strings.Join(stringx.Remove(fsFilesFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	fsFilesRowsWithPlaceHolder = strings.Join(stringx.Remove(fsFilesFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheFsFilesIdPrefix       = "cache:fsFiles:id:"
	cacheFsFilesFileHashPrefix = "cache:fsFiles:fileHash:"
)

type (
	fsFilesModel interface {
		Insert(ctx context.Context, data *FsFiles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FsFiles, error)
		FindOneByFileHash(ctx context.Context, fileHash string) (*FsFiles, error)
		Update(ctx context.Context, data *FsFiles) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFsFilesModel struct {
		sqlc.CachedConn
		table string
	}

	FsFiles struct {
		Id         int64     `db:"id"`
		FileHash   string    `db:"file_hash"` // 文件hash
		FileName   string    `db:"file_name"` // 文件名
		FileSize   int64     `db:"file_size"` // 文件大小
		FileAddr   string    `db:"file_addr"` // 文件存储位置
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Status     int64     `db:"status"` // 状态(可用/禁用/已删除等状态)
	}
)

func newFsFilesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFsFilesModel {
	return &defaultFsFilesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`fs_files`",
	}
}

func (m *defaultFsFilesModel) Insert(ctx context.Context, data *FsFiles) (sql.Result, error) {
	fsFilesIdKey := fmt.Sprintf("%s%v", cacheFsFilesIdPrefix, data.Id)
	fsFilesFileHashKey := fmt.Sprintf("%s%v", cacheFsFilesFileHashPrefix, data.FileHash)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, fsFilesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FileHash, data.FileName, data.FileSize, data.FileAddr, data.Status)
	}, fsFilesIdKey, fsFilesFileHashKey)
	return ret, err
}

func (m *defaultFsFilesModel) FindOne(ctx context.Context, id int64) (*FsFiles, error) {
	fsFilesIdKey := fmt.Sprintf("%s%v", cacheFsFilesIdPrefix, id)
	var resp FsFiles
	err := m.QueryRowCtx(ctx, &resp, fsFilesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fsFilesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFsFilesModel) FindOneByFileHash(ctx context.Context, fileHash string) (*FsFiles, error) {
	fsFilesFileHashKey := fmt.Sprintf("%s%v", cacheFsFilesFileHashPrefix, fileHash)
	var resp FsFiles
	err := m.QueryRowIndexCtx(ctx, &resp, fsFilesFileHashKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `file_hash` = ? limit 1", fsFilesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, fileHash); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFsFilesModel) Update(ctx context.Context, data *FsFiles) error {
	fsFilesIdKey := fmt.Sprintf("%s%v", cacheFsFilesIdPrefix, data.Id)
	fsFilesFileHashKey := fmt.Sprintf("%s%v", cacheFsFilesFileHashPrefix, data.FileHash)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fsFilesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FileHash, data.FileName, data.FileSize, data.FileAddr, data.Status, data.Id)
	}, fsFilesIdKey, fsFilesFileHashKey)
	return err
}

func (m *defaultFsFilesModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	fsFilesIdKey := fmt.Sprintf("%s%v", cacheFsFilesIdPrefix, id)
	fsFilesFileHashKey := fmt.Sprintf("%s%v", cacheFsFilesFileHashPrefix, data.FileHash)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fsFilesIdKey, fsFilesFileHashKey)
	return err
}

func (m *defaultFsFilesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFsFilesIdPrefix, primary)
}

func (m *defaultFsFilesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fsFilesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFsFilesModel) tableName() string {
	return m.table
}
