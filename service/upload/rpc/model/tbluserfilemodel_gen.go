// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tblUserFileFieldNames          = builder.RawFieldNames(&TblUserFile{})
	tblUserFileRows                = strings.Join(tblUserFileFieldNames, ",")
	tblUserFileRowsExpectAutoSet   = strings.Join(stringx.Remove(tblUserFileFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	tblUserFileRowsWithPlaceHolder = strings.Join(stringx.Remove(tblUserFileFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheTblUserFileIdPrefix               = "cache:tblUserFile:id:"
	cacheTblUserFileUsernameFileHashPrefix = "cache:tblUserFile:username:fileHash:"
)

type (
	tblUserFileModel interface {
		Insert(ctx context.Context, data *TblUserFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TblUserFile, error)
		FindOneByUsernameFileHash(ctx context.Context, username string, fileHash string) (*TblUserFile, error)
		Update(ctx context.Context, data *TblUserFile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTblUserFileModel struct {
		sqlc.CachedConn
		table string
	}

	TblUserFile struct {
		Id         int64     `db:"id"`
		Username   string    `db:"username"`
		FileHash   string    `db:"file_hash"` // 文件hash
		FileSize   int64     `db:"file_size"` // 文件大小
		FileName   string    `db:"file_name"` // 文件名
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Status     int64     `db:"status"` // 文件状态(0正常1已删除2禁用)
	}
)

func newTblUserFileModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTblUserFileModel {
	return &defaultTblUserFileModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tbl_user_file`",
	}
}

func (m *defaultTblUserFileModel) Insert(ctx context.Context, data *TblUserFile) (sql.Result, error) {
	tblUserFileIdKey := fmt.Sprintf("%s%v", cacheTblUserFileIdPrefix, data.Id)
	tblUserFileUsernameFileHashKey := fmt.Sprintf("%s%v:%v", cacheTblUserFileUsernameFileHashPrefix, data.Username, data.FileHash)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, tblUserFileRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.FileHash, data.FileSize, data.FileName, data.Status)
	}, tblUserFileUsernameFileHashKey, tblUserFileIdKey)
	return ret, err
}

func (m *defaultTblUserFileModel) FindOne(ctx context.Context, id int64) (*TblUserFile, error) {
	tblUserFileIdKey := fmt.Sprintf("%s%v", cacheTblUserFileIdPrefix, id)
	var resp TblUserFile
	err := m.QueryRowCtx(ctx, &resp, tblUserFileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tblUserFileRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTblUserFileModel) FindOneByUsernameFileHash(ctx context.Context, username string, fileHash string) (*TblUserFile, error) {
	tblUserFileUsernameFileHashKey := fmt.Sprintf("%s%v:%v", cacheTblUserFileUsernameFileHashPrefix, username, fileHash)
	var resp TblUserFile
	err := m.QueryRowIndexCtx(ctx, &resp, tblUserFileUsernameFileHashKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? and `file_hash` = ? limit 1", tblUserFileRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username, fileHash); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTblUserFileModel) Update(ctx context.Context, data *TblUserFile) error {
	tblUserFileIdKey := fmt.Sprintf("%s%v", cacheTblUserFileIdPrefix, data.Id)
	tblUserFileUsernameFileHashKey := fmt.Sprintf("%s%v:%v", cacheTblUserFileUsernameFileHashPrefix, data.Username, data.FileHash)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tblUserFileRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.FileHash, data.FileSize, data.FileName, data.Status, data.Id)
	}, tblUserFileIdKey, tblUserFileUsernameFileHashKey)
	return err
}

func (m *defaultTblUserFileModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tblUserFileUsernameFileHashKey := fmt.Sprintf("%s%v:%v", cacheTblUserFileUsernameFileHashPrefix, data.Username, data.FileHash)
	tblUserFileIdKey := fmt.Sprintf("%s%v", cacheTblUserFileIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tblUserFileUsernameFileHashKey, tblUserFileIdKey)
	return err
}

func (m *defaultTblUserFileModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTblUserFileIdPrefix, primary)
}

func (m *defaultTblUserFileModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tblUserFileRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTblUserFileModel) tableName() string {
	return m.table
}
